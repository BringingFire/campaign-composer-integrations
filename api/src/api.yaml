openapi: "3.0.0"
info:
  title: Campaign Composer REST API
  version: "1.1.0"

security:
  - apiKeyAuth: []

tags:
  - name: campaigns
  - name: documents
  - name: maps
  - name: entities
  - name: links
  - name: images
  - name: folders

paths:
  /campaigns:
    get:
      operationId: listCampaigns
      tags:
        - campaigns
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/campaign.yaml#/campaign'
  /campaigns/{campaignId}/documents:
    get:
      summary: Get a list of metadata for all documents
      operationId: listDocuments
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - in: query
          name: entityId
          description: Optional entity ID to filter entities by
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/document.yaml#/documentMeta'
  /campaigns/{campaignId}/documents/{docId}:
    get:
      operationId: getDocument
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/docId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/document.yaml#/document'
  /campaigns/{campaignId}/maps:
    get:
      summary: Get a list of all maps
      operationId: listMaps
      tags:
        - maps
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - in: query
          name: entityId
          description: Optional entity ID to filter entities by
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/map.yaml#/cMap'
  /campaigns/{campaignId}/maps/{mapId}:
    get:
      operationId: getMap
      tags:
        - maps
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/mapId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/map.yaml#/cMap'
  /campaigns/{campaignId}/maps/{mapId}/background:
    get:
      operationId: getMapBackground
      tags:
        - maps
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/mapId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/map.yaml#/mapBackground'
  /campaigns/{campaignId}/maps/{mapId}/metadata:
    get:
      operationId: getMapMetadata
      tags:
        - maps
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/mapId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/map.yaml#/mapMetadata'
  /campaigns/{campaignId}/folders:
    get:
      summary: Get a list of metadata for all folders
      operationId: listFolders
      tags:
        - folders
      parameters:
        - $ref: '#/components/parameters/campaignId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/folder.yaml#/folder'
  /campaigns/{campaignId}/folders/{folderId}:
    get:
      operationId: getFolder
      tags:
        - folders
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/folderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/folder.yaml#/folder'
  /campaigns/{campaignId}/entities:
    get:
      summary: Get a list of metadata for all entities
      operationId: listEntities
      tags:
        - entities
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - in: query
          name: folderId
          description: Optional folder ID to filter entities by
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/entity.yaml#/entitySummary'
  /campaigns/{campaignId}/entities/{entityId}:
    get:
      operationId: getEntity
      tags:
        - entities
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/entityId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/entity.yaml#/entitySummary'
  /campaigns/{campaignId}/links:
    get:
      summary: Get a list of metadata for all links
      operationId: listLinks
      tags:
        - links
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - in: query
          name: entityId
          description: Optional entity ID to filter entities by
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/link.yaml#/link'
  /campaigns/{campaignId}/links/{linkId}:
    get:
      operationId: getLink
      tags:
        - links
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/linkId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/link.yaml#/link'
  /campaigns/{campaignId}/images:
    get:
      summary: Get a list of metadata for all images
      operationId: listImages
      tags:
        - images
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - in: query
          name: entityId
          description: Optional entity ID to filter entities by
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './models/image.yaml#/image'
  /campaigns/{campaignId}/images/{imageId}:
    get:
      operationId: getImage
      tags:
        - images
      parameters:
        - $ref: '#/components/parameters/campaignId'
        - $ref: '#/components/parameters/linkId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './models/image.yaml#/image'

components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  parameters:
    campaignId:
      name: campaignId
      in: path
      required: true
      schema:
        type: integer
    docId:
      name: docId
      in: path
      required: true
      schema:
        type: string
    mapId:
      name: mapId
      in: path
      required: true
      schema:
        type: string
    entityId:
      name: entityId
      in: path
      required: true
      schema:
        type: integer
    linkId:
      name: entityId
      in: path
      required: true
      schema:
        type: string
    imageId:
      name: entityId
      in: path
      required: true
      schema:
        type: string
    folderId:
      name: folderId
      in: path
      required: true
      schema:
        type: integer
